#version: "3"
#
#services:
#  db_wa:
#    image: postgres:latest
#    container_name: db_wa
#    environment:
#      POSTGRES_DB: ${DB_NAME}
#      POSTGRES_USER: ${DB_USER}
#      POSTGRES_PASSWORD: ${DB_PASSWORD}
#    volumes:
#      - postgres_data:/var/lib/postgresql/data
#
#  back:
#    container_name: back
#    build:
#      context: .
#      dockerfile: Dockerfile
#    restart: always
#    command: sh -c "python manage.py makemigrations && python manage.py migrate && python manage.py collectstatic
#        --no-input && gunicorn -b 0.0.0.0:8012 walkeat.wsgi --reload"
#    env_file:
#      - .env
#    volumes:
#      - .:/app
#      - ./static:/static
#    ports:
#      - "8012:8012"
#    depends_on:
#      - db_wa
#    links:
#      - db_wa
#volumes:
#  postgres_data:

version: '3'

services:
  web:

    build: .
    command: sh -c "python manage.py makemigrations && python manage.py migrate && python manage.py collectstatic
      --no-input && gunicorn -b 0.0.0.0:8000 walkeat.wsgi --reload"
    ports:
      - "8030:8030"
    env_file:
      - .env



version: '3'

services:
  back:
    container_name: back
    build:
      context: .
      dockerfile: Dockerfile
    command: sh -c "python manage.py makemigrations && python manage.py migrate && python manage.py collectstatic
      --no-input && gunicorn -b 0.0.0.0:8000 beuty.wsgi --reload"
    ports:
      - 8000:8000
    env_file:
      - .env
    volumes:
      - .:/opt/services/beuty
      - ./static:/opt/services/beuty/src/static
      - ./media:/opt/services/beuty/src/media
    networks:
      - nginx_network
      - db_network
    depends_on:
      - db
    links:
      - db

  db:
    image: postgres:14-alpine
    container_name: db
    restart: always
    networks:
      - db_network
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - /var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
z
      - POSTGRES_USER=${DB_USER}

volumes:
  postgres_data:
networks:
  nginx_network:
    driver: bridge
  db_network:
    driver: bridge